.TH "EPoint" 3AZURE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
EPoint \- An AZURE data point\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <EPoint\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBEPoint\fP (\fBDataLine\fP, \fBESegment\fP *)"
.br
.ti -1c
.RI "\fBEPoint\fP (double, double, \fBESegment\fP *)"
.br
.ti -1c
.RI "\fBEPoint\fP (double, double, int, int, bool, bool, bool, double, int, int)"
.br
.ti -1c
.RI "bool \fBIsDifferential\fP () const"
.br
.ti -1c
.RI "bool \fBIsPhase\fP () const"
.br
.ti -1c
.RI "bool \fBIsMapped\fP () const"
.br
.ti -1c
.RI "bool \fBIsTargetEffect\fP () const"
.br
.ti -1c
.RI "bool \fBIsAngularDist\fP () const"
.br
.ti -1c
.RI "int \fBGetEntranceKey\fP () const"
.br
.ti -1c
.RI "int \fBGetExitKey\fP () const"
.br
.ti -1c
.RI "int \fBGetMaxLOrder\fP () const"
.br
.ti -1c
.RI "int \fBGetL\fP () const"
.br
.ti -1c
.RI "int \fBNumLocalMappedPoints\fP () const"
.br
.ti -1c
.RI "int \fBNumSubPoints\fP () const"
.br
.ti -1c
.RI "int \fBGetTargetEffectNum\fP () const"
.br
.ti -1c
.RI "int \fBGetMaxAngDistOrder\fP () const"
.br
.ti -1c
.RI "int \fBGetNumAngularDists\fP () const"
.br
.ti -1c
.RI "double \fBGetLabAngle\fP () const"
.br
.ti -1c
.RI "double \fBGetCMAngle\fP () const"
.br
.ti -1c
.RI "double \fBGetLabEnergy\fP () const"
.br
.ti -1c
.RI "double \fBGetCMEnergy\fP () const"
.br
.ti -1c
.RI "double \fBGetExcitationEnergy\fP () const"
.br
.ti -1c
.RI "double \fBGetLegendreP\fP (int) const"
.br
.ti -1c
.RI "double \fBGetLabCrossSection\fP () const"
.br
.ti -1c
.RI "double \fBGetCMCrossSection\fP () const"
.br
.ti -1c
.RI "double \fBGetLabCrossSectionError\fP () const"
.br
.ti -1c
.RI "double \fBGetCMCrossSectionError\fP () const"
.br
.ti -1c
.RI "double \fBGetGeometricalFactor\fP () const"
.br
.ti -1c
.RI "double \fBGetFitCrossSection\fP () const"
.br
.ti -1c
.RI "double \fBGetSFactorConversion\fP () const"
.br
.ti -1c
.RI "double \fBGetSqrtPenetrability\fP (int, int) const"
.br
.ti -1c
.RI "double \fBGetJ\fP () const"
.br
.ti -1c
.RI "double \fBGetStoppingPower\fP () const"
.br
.ti -1c
.RI "double \fBGetTargetThickness\fP () const"
.br
.ti -1c
.RI "double \fBGetAngularDist\fP (int) const"
.br
.ti -1c
.RI "\fBcomplex\fP \fBGetLoElement\fP (int, int) const"
.br
.ti -1c
.RI "\fBcomplex\fP \fBGetExpCoulombPhase\fP (int, int) const"
.br
.ti -1c
.RI "\fBcomplex\fP \fBGetExpHardSpherePhase\fP (int, int) const"
.br
.ti -1c
.RI "\fBcomplex\fP \fBGetCoulombAmplitude\fP () const"
.br
.ti -1c
.RI "\fBcomplex\fP \fBGetECAmplitude\fP (int, int) const"
.br
.ti -1c
.RI "\fBEnergyMap\fP \fBGetMap\fP () const"
.br
.ti -1c
.RI "void \fBInitialize\fP (\fBCNuc\fP *, const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBConvertLabEnergy\fP (\fBPPair\fP *)"
.br
.ti -1c
.RI "void \fBConvertDecayEnergy\fP (\fBPPair\fP *)"
.br
.ti -1c
.RI "void \fBConvertLabAngle\fP (\fBPPair\fP *)"
.br
.ti -1c
.RI "void \fBConvertLabAngle\fP (\fBPPair\fP *, \fBPPair\fP *, const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBConvertCrossSection\fP (\fBPPair\fP *, \fBPPair\fP *)"
.br
.ti -1c
.RI "void \fBAddLegendreP\fP (double)"
.br
.ti -1c
.RI "void \fBSetGeometricalFactor\fP (double)"
.br
.ti -1c
.RI "void \fBSetFitCrossSection\fP (double)"
.br
.ti -1c
.RI "void \fBSetSFactorConversion\fP (double)"
.br
.ti -1c
.RI "void \fBSetExitKey\fP (int)"
.br
.ti -1c
.RI "void \fBCalcLegendreP\fP (int, \fBTargetEffect\fP *)"
.br
.ti -1c
.RI "void \fBCalcEDependentValues\fP (\fBCNuc\fP *, const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBAddLoElement\fP (int, int, \fBcomplex\fP)"
.br
.ti -1c
.RI "void \fBAddSqrtPenetrability\fP (int, int, double)"
.br
.ti -1c
.RI "void \fBAddExpCoulombPhase\fP (int, int, \fBcomplex\fP)"
.br
.ti -1c
.RI "void \fBAddExpHardSpherePhase\fP (int, int, \fBcomplex\fP)"
.br
.ti -1c
.RI "void \fBCalcCoulombAmplitude\fP (\fBCNuc\fP *)"
.br
.ti -1c
.RI "void \fBSetCoulombAmplitude\fP (\fBcomplex\fP)"
.br
.ti -1c
.RI "void \fBCalculateECAmplitudes\fP (\fBCNuc\fP *, const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBAddECAmplitude\fP (int, int, \fBcomplex\fP)"
.br
.ti -1c
.RI "void \fBCalculate\fP (\fBCNuc\fP *, const \fBConfig\fP &configure, \fBEPoint\fP *parent=NULL, int subPointNum=0)"
.br
.ti -1c
.RI "void \fBSetMap\fP (int, int)"
.br
.ti -1c
.RI "void \fBAddLocalMappedPoint\fP (\fBEPoint\fP *)"
.br
.ti -1c
.RI "void \fBClearLocalMappedPoints\fP ()"
.br
.ti -1c
.RI "void \fBSetTargetEffectNum\fP (int)"
.br
.ti -1c
.RI "void \fBAddSubPoint\fP (\fBEPoint\fP)"
.br
.ti -1c
.RI "void \fBIntegrateTargetEffect\fP ()"
.br
.ti -1c
.RI "void \fBSetParentData\fP (\fBEData\fP *)"
.br
.ti -1c
.RI "void \fBSetStoppingPower\fP (double)"
.br
.ti -1c
.RI "void \fBSetTargetThickness\fP (double)"
.br
.ti -1c
.RI "void \fBSetAngularDists\fP (\fBvector_r\fP)"
.br
.ti -1c
.RI "\fBEData\fP * \fBGetParentData\fP () const"
.br
.ti -1c
.RI "\fBEPoint\fP * \fBGetLocalMappedPoint\fP (int) const"
.br
.ti -1c
.RI "\fBEPoint\fP * \fBGetSubPoint\fP (int)"
.br
.ti -1c
.RI "std::vector< \fBEPoint\fP > & \fBGetSubPoints\fP ()"
.br
.ti -1c
.RI "std::vector< \fBEPoint\fP * > & \fBGetMappedPoints\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
An AZURE data point\&. 

A data point object in AZURE consists of a defined entrance and exit pair, an energy, an angle, measured cross section and uncertainty, s-factor conversions, and several flags that determine the type of data (angle integrated or differential) to be analysed\&. 
.PP
Definition at line \fB36\fP of file \fBEPoint\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "EPoint::EPoint (\fBDataLine\fP dataLine, \fBESegment\fP * parent)"
This constructor is used if the data point is to be created from a line in a data file\&. A pointer to the parent segment is passed to the constructor for the intialization of the \fBEPoint\fP object\&. 
.PP
Definition at line \fB23\fP of file \fBEPoint\&.cpp\fP\&.
.SS "EPoint::EPoint (double angle, double energy, \fBESegment\fP * parent)"
This constructor is used if the data point is to be created with no experimental data\&. A pointer to the parent segment is passed to the constructor for the intialization of the \fBEPoint\fP object\&. 
.PP
Definition at line \fB56\fP of file \fBEPoint\&.cpp\fP\&.
.SS "EPoint::EPoint (double angle, double energy, int entranceKey, int exitKey, bool isDifferential, bool isPhase, bool isAngularDist, double jValue, int lValue, int maxAngDistOrder)"
This constructor is used if the data point is to be created with no experimental data and no parent segment\&. Such a point is used if AZURE is to be called as an energy- dependent function for reaction rate and target effect calculations with dynamic integration\&. All options must be set manually\&. 
.PP
Definition at line \fB90\fP of file \fBEPoint\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void EPoint::AddECAmplitude (int kGroupNum, int ecMGroupNum, \fBcomplex\fP ecAmplitude)"
Adds an external capture amplitude with reference to a specified reaction pathway\&. 
.PP
Definition at line \fB911\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::AddExpCoulombPhase (int jGroupNum, int channelNum, \fBcomplex\fP expShift)"
Adds an exponential of the Coulomb phase shift with reference to positions in the \fBJGroup\fP and subsequent \fBAChannel\fP vectors\&. 
.br
 
.PP
Definition at line \fB777\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::AddExpHardSpherePhase (int jGroupNum, int channelNum, \fBcomplex\fP expShift)"
Adds an exponential of the hard sphere phase shift with reference to positions in the \fBJGroup\fP and subsequent \fBAChannel\fP vectors\&. 
.br
 
.PP
Definition at line \fB789\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::AddLegendreP (double polynomial)"
Adds a Legendre polynomial to the vector\&. Polynomials are added to the vector in the order as L=0,1,2,\&.\&.\&. 
.PP
Definition at line \fB566\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::AddLocalMappedPoint (\fBEPoint\fP * point)"
If a point is mapped to the current point, a pointer to the mapped point is added to a vector\&. 
.PP
Definition at line \fB975\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::AddLoElement (int jGroupNum, int channelNum, \fBcomplex\fP loElement)"
Adds an $ L_o $ matrix element with reference to positions in the \fBJGroup\fP and subsequent \fBAChannel\fP vectors\&. 
.br
 
.PP
Definition at line \fB753\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::AddSqrtPenetrability (int jGroupNum, int channelNum, double sqrtPene)"
Adds a square root of penetrability with reference to positions in the \fBJGroup\fP and subsequent \fBAChannel\fP vectors\&. 
.br
 
.PP
Definition at line \fB765\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::AddSubPoint (\fBEPoint\fP subPoint)"
Adds a sub-point to the current point object for target effect integration\&. 
.PP
Definition at line \fB999\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::CalcCoulombAmplitude (\fBCNuc\fP * theCNuc)"
Calculates the Coulomb amplitude $ C_\alpha $ for the data point\&. 
.PP
Definition at line \fB800\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::CalcEDependentValues (\fBCNuc\fP * theCNuc, const \fBConfig\fP & configure)"
This function calculates several energy dependent quantities simultaniously\&. This includes the geometrical cross section, the s-factor conversion, the $ L_o $ matrix elements, the square root of the penetrability, and the exponentials of the Coulomb phase shifts and hard sphere phase shfits\&. 
.PP
Definition at line \fB643\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::CalcLegendreP (int maxL, \fBTargetEffect\fP * targetEffect)"
Calculates Legendre polynomials up to a maximum order\&. The polynomials are added, in order, to a vector\&. 
.PP
Definition at line \fB606\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::Calculate (\fBCNuc\fP * theCNuc, const \fBConfig\fP & configure, \fBEPoint\fP * parent = \fCNULL\fP, int subPointNum = \fC0\fP)"
Calculates the cross section for a data point based on the fit parameters in the compound nucleus\&. 
.PP
Definition at line \fB922\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::CalculateECAmplitudes (\fBCNuc\fP * theCNuc, const \fBConfig\fP & configure)"
Calculates the external capture amplitudes for the data point\&. The amplitudes are calculated for all reaction pathways with corresponding entrance and exit pairs\&. 
.PP
Definition at line \fB834\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::ClearLocalMappedPoints ()"
Clears vector containing pointers to points mapped to the current point\&. 
.PP
Definition at line \fB983\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::ConvertCrossSection (\fBPPair\fP * entrancePair, \fBPPair\fP * exitPair)"
Calculates center of mass cross sections\&. When a data point is initialized, the same cross section is copied into the attributes for center of mass and lab cross section\&. If this function is called, the center of mass cross section attribute is overwritten with the value calculated from the lab cross section attribute\&. 
.PP
Definition at line \fB538\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::ConvertDecayEnergy (\fBPPair\fP * pPair)"
Calculates the total decay energy from the light particle decay energy, assuming the parent nucleus was at rest when it decayed\&. When a data point is initialized, the same energy is copied into the attributes for center of mass and lab energy\&. If this function is called, the center of mass energy attribute is overwritten with the value calculated from the lab energy attribute\&. 
.PP
Definition at line \fB482\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::ConvertLabAngle (\fBPPair\fP * pPair)"
Calculates center of mass angles\&. When a data point is initialized, the same angle is copied into the attributes for center of mass and lab angles\&. If this function is called, the center of mass angle attribute is overwritten with the value calculated from the lab angle attribute\&. This version of the overloaded function is for scattering channels\&. 
.PP
Definition at line \fB496\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::ConvertLabAngle (\fBPPair\fP * entrancePair, \fBPPair\fP * exitPair, const \fBConfig\fP & configure)"
Calculates center of mass angles\&. When a data point is initialized, the same angle is copied into the attributes for center of mass and lab angles\&. If this function is called, the center of mass angle attribute is overwritten with the value calculated from the lab angle attribute\&. This version of the overloaded function is for non-elastic particle channels\&. 
.PP
Definition at line \fB507\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::ConvertLabEnergy (\fBPPair\fP * pPair)"
Calculates center of mass energy\&. When a data point is initialized, the same energy is copied into the attributes for center of mass and lab energy\&. If this function is called, the center of mass energy attribute is overwritten with the value calculated from the lab energy attribute\&. 
.PP
Definition at line \fB468\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetAngularDist (int order) const"
Returns the angular distribution coefficient corresponding to the given order; 
.PP
Definition at line \fB382\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetCMAngle () const"
Returns the angle of the data point in the center of mass frame\&. 
.PP
Definition at line \fB251\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetCMCrossSection () const"
Returms the experimental cross section in the center of mass frame\&. 
.PP
Definition at line \fB300\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetCMCrossSectionError () const"
Returns the experimental uncertainty in the center of mass frame\&. 
.PP
Definition at line \fB316\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetCMEnergy () const"
Returns the energy of the point in the center of mass frame\&. 
.PP
Definition at line \fB267\fP of file \fBEPoint\&.cpp\fP\&.
.SS "\fBcomplex\fP EPoint::GetCoulombAmplitude () const"
Returns the Coulomb amplitude $ C_\alpha $ for the data point\&. 
.PP
Definition at line \fB419\fP of file \fBEPoint\&.cpp\fP\&.
.SS "\fBcomplex\fP EPoint::GetECAmplitude (int kGroupNum, int ecMGroupNum) const"
Returns the external capture amplitude for a given external reaction pathway specified by positions in the \fBKGroup\fP and subsequent \fBECMGroup\fP vectors\&. 
.PP
Definition at line \fB428\fP of file \fBEPoint\&.cpp\fP\&.
.SS "int EPoint::GetEntranceKey () const"
Returns the entrance particle pair key of the data point\&. The key need not be the same as the position of the pair in the \fBPPair\fP vector\&. Pair keys are used in the setup files of AZURE\&. 
.PP
Definition at line \fB168\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetExcitationEnergy () const"
Returns the energy of the point in compound excitation energy\&. 
.PP
Definition at line \fB275\fP of file \fBEPoint\&.cpp\fP\&.
.SS "int EPoint::GetExitKey () const"
Returns the exit particle pair key of the data point\&. The key need not be the same as the position of the pair in the \fBPPair\fP vector\&. Pair keys are used in the setup files of AZURE\&. 
.PP
Definition at line \fB178\fP of file \fBEPoint\&.cpp\fP\&.
.SS "\fBcomplex\fP EPoint::GetExpCoulombPhase (int jGroupNum, int channelNum) const"
Returns the factor $ \exp(\omega_c) $ where $ \omega_c $ is the Coulomb phase shift\&. The channel us specified by positions in the \fBJGroup\fP and subsequent \fBAChannel\fP vectors\&. 
.PP
Definition at line \fB401\fP of file \fBEPoint\&.cpp\fP\&.
.SS "\fBcomplex\fP EPoint::GetExpHardSpherePhase (int jGroupNum, int channelNum) const"
Returns the factor $ \exp(\delta_c) $ where $ \delta_c $ is the hard sphere phase shift\&. The channel us specified by positions in the \fBJGroup\fP and subsequent \fBAChannel\fP vectors\&. 
.PP
Definition at line \fB411\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetFitCrossSection () const"
Returns the calculated AZURE cross section\&. 
.PP
Definition at line \fB332\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetGeometricalFactor () const"
Returns the geometrical cross section factor $ \frac{\pi}{k^2} $\&. 
.PP
Definition at line \fB324\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetJ () const"
Returns the total spin value for the data point\&. Only applies if the point is phase shift\&. 
.PP
Definition at line \fB358\fP of file \fBEPoint\&.cpp\fP\&.
.SS "int EPoint::GetL () const"
Returns the orbital angular momentum value for the point\&. Only applies if the point is phase shift\&. 
.PP
Definition at line \fB195\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetLabAngle () const"
Returns the angle of the data point in the laboratory frame\&. 
.PP
Definition at line \fB243\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetLabCrossSection () const"
Returns the experimental cross section in the laboratory frame\&. 
.PP
Definition at line \fB292\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetLabCrossSectionError () const"
Returns the experimental uncertainty in the laboratory frame\&. 
.PP
Definition at line \fB308\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetLabEnergy () const"
Returns the energy of the point in the laboratory frame\&. 
.PP
Definition at line \fB259\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetLegendreP (int lOrder) const"
Returns the Legendre polynomial specified by an order\&. 
.br
 
.PP
Definition at line \fB284\fP of file \fBEPoint\&.cpp\fP\&.
.SS "\fBEPoint\fP * EPoint::GetLocalMappedPoint (int mappedPointNum) const"
Returns a pointer to a point mapped to the current point specified by a position in the mapped point vector\&. 
.PP
Definition at line \fB1152\fP of file \fBEPoint\&.cpp\fP\&.
.SS "\fBcomplex\fP EPoint::GetLoElement (int jGroupNum, int channelNum) const"
Returns the $ L_o $ diagonal matrix element for a channel specified by positions in the \fBJGroup\fP and subsequent \fBAChannel\fP vectors\&. 
.PP
Definition at line \fB391\fP of file \fBEPoint\&.cpp\fP\&.
.SS "\fBEnergyMap\fP EPoint::GetMap () const"
If a point is mapped, returns an \fBEnergyMap\fP structure containing the point to which it is mapped\&. 
.PP
Definition at line \fB436\fP of file \fBEPoint\&.cpp\fP\&.
.SS "std::vector< \fBEPoint\fP * > & EPoint::GetMappedPoints ()"
Returns a reference to the vector of pointers to mapped \fBEPoint\fP objects\&. 
.PP
Definition at line \fB1180\fP of file \fBEPoint\&.cpp\fP\&.
.SS "int EPoint::GetMaxAngDistOrder () const"
Returns the maximum polynomial order of the point is angular distribution\&. 
.PP
Definition at line \fB227\fP of file \fBEPoint\&.cpp\fP\&.
.SS "int EPoint::GetMaxLOrder () const"
The maximum order of the Legendre polynomials stored in the point object\&. 
.PP
Definition at line \fB186\fP of file \fBEPoint\&.cpp\fP\&.
.SS "int EPoint::GetNumAngularDists () const"
Return the number of angular distribution coefficients in the vector\&. 
.PP
Definition at line \fB235\fP of file \fBEPoint\&.cpp\fP\&.
.SS "\fBEData\fP * EPoint::GetParentData () const"
Returns a pointer to the parent \fBEData\fP object\&. 
.PP
Definition at line \fB1144\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetSFactorConversion () const"
Returns the multiplicative conversion factor from cross section to s-factor\&. 
.PP
Definition at line \fB340\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetSqrtPenetrability (int jGroupNum, int channelNum) const"
Returns the square root of the penetrability for a channel specified by positions in the \fBJGroup\fP and subsequent \fBAChannel\fP vectors\&. 
.PP
Definition at line \fB349\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetStoppingPower () const"
For target integration to fit yield curves, the stopping power (or, rather, stopping cross section) is calculated and stored for each sub-point\&. This function returns the precalculated value\&. 
.PP
Definition at line \fB366\fP of file \fBEPoint\&.cpp\fP\&.
.SS "\fBEPoint\fP * EPoint::GetSubPoint (int subPoint)"
Returns a pointer to the specified sub-point in the current \fBEPoint\fP object\&. 
.PP
Definition at line \fB1160\fP of file \fBEPoint\&.cpp\fP\&.
.SS "std::vector< \fBEPoint\fP > & EPoint::GetSubPoints ()"
Returns a reference to the vector of \fBEPoint\fP objects containing the subpoints used in target effect integration\&. 
.PP
Definition at line \fB1172\fP of file \fBEPoint\&.cpp\fP\&.
.SS "int EPoint::GetTargetEffectNum () const"
Returns the position of the corresponding \fBTargetEffect\fP object in the parent \fBEData\fP object\&. 
.PP
Definition at line \fB219\fP of file \fBEPoint\&.cpp\fP\&.
.SS "double EPoint::GetTargetThickness () const"
Returns the energy loss of the beam in the target for the current \fBEPoint\fP object\&. 
.PP
Definition at line \fB374\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::Initialize (\fBCNuc\fP * compound, const \fBConfig\fP & configure)"
Initializes a data point to be used in a calculation\&. Initilization is done before the fitting process to calculate all energy dependent quantities that do no rely on the R-Matrix fit parameters\&. 
.PP
Definition at line \fB454\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::IntegrateTargetEffect ()"
This function is called to integrate the vector of sub-points to determine the yield considering a given target effect\&. The function uses Simpson's rule to perform the integration\&. 
.PP
Definition at line \fB1009\fP of file \fBEPoint\&.cpp\fP\&.
.SS "bool EPoint::IsAngularDist () const"
Returns true if the point is angular distribution, otherwise returns false\&. 
.PP
Definition at line \fB138\fP of file \fBEPoint\&.cpp\fP\&.
.SS "bool EPoint::IsDifferential () const"
Returns true if the point is differential cross section, otherwise returns false\&. 
.PP
Definition at line \fB122\fP of file \fBEPoint\&.cpp\fP\&.
.SS "bool EPoint::IsMapped () const"
Returns true if the point is a mapped point, otherwise returns false\&. Mapping in AZURE is performed so calculations are not redundantly performed for like energies\&. Energy dependent quantities are calculated only once for a given energy, and then copied to mapped points\&. 
.PP
Definition at line \fB149\fP of file \fBEPoint\&.cpp\fP\&.
.SS "bool EPoint::IsPhase () const"
Returns true if the point is phase shift, otherwise returns false\&. 
.PP
Definition at line \fB130\fP of file \fBEPoint\&.cpp\fP\&.
.SS "bool EPoint::IsTargetEffect () const"
This function retruns true if the point has a corresponding \fBTargetEffect\fP object, otherwise it returns false\&. 
.PP
Definition at line \fB157\fP of file \fBEPoint\&.cpp\fP\&.
.SS "int EPoint::NumLocalMappedPoints () const"
Returns the number of points mapped to the current point\&. 
.br
 
.PP
Definition at line \fB203\fP of file \fBEPoint\&.cpp\fP\&.
.SS "int EPoint::NumSubPoints () const"
Returns the total number of sub-points contained within the present objet\&. The sub-points are used to calculate the target effect integrals\&. 
.PP
Definition at line \fB211\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::SetAngularDists (\fBvector_r\fP dists)"
Sets the angular distribution coefficients\&. 
.PP
Definition at line \fB1135\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::SetCoulombAmplitude (\fBcomplex\fP amplitude)"
Sets the Coulomb amplitude $ C_\alpha $ for the data point\&. 
.PP
Definition at line \fB824\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::SetExitKey (int key)"
Sets the exit key to the given value; 
.PP
Definition at line \fB598\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::SetFitCrossSection (double crossSection)"
Sets the calculated AZURE cross section\&. 
.PP
Definition at line \fB582\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::SetGeometricalFactor (double geoFactor)"
Sets the geometrical cross section factor $ \frac{\pi}{k^2} $\&. 
.PP
Definition at line \fB574\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::SetMap (int segmentNum, int pointNum)"
If a point is mapped, sets the internal attribute indicating which point it is mapped to\&. 
.PP
Definition at line \fB965\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::SetParentData (\fBEData\fP * parentData)"
This function sets an internal pointer to the parent \fBEData\fP object\&. 
.PP
Definition at line \fB1110\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::SetSFactorConversion (double conversion)"
Sets the multiplicative conversion from cross section to s-factor\&. 
.PP
Definition at line \fB590\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::SetStoppingPower (double stoppingPower)"
This function sets the stopping cross section (effective) for the current \fBEPoint\fP object\&. Used only for sub-point involoved in target effect integration\&. 
.PP
Definition at line \fB1119\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::SetTargetEffectNum (int targetEffectNum)"
Sets the position of the corresponding \fBTargetEffect\fP object in the parent \fBEData\fP object\&. 
.PP
Definition at line \fB991\fP of file \fBEPoint\&.cpp\fP\&.
.SS "void EPoint::SetTargetThickness (double targetThickness)"
This functions sets the energy loss of the beam in the target for the current \fBEPoint\fP object\&. 
.PP
Definition at line \fB1127\fP of file \fBEPoint\&.cpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for AZURE2 from the source code\&.
