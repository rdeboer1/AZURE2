.TH "ESegment" 3AZURE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ESegment \- An AZURE data segment\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ESegment\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBESegment\fP (\fBSegLine\fP)"
.br
.ti -1c
.RI "\fBESegment\fP (\fBExtrapLine\fP)"
.br
.ti -1c
.RI "bool \fBIsInSegment\fP (\fBEPoint\fP)"
.br
.ti -1c
.RI "bool \fBIsDifferential\fP () const"
.br
.ti -1c
.RI "bool \fBIsPhase\fP () const"
.br
.ti -1c
.RI "bool \fBIsTargetEffect\fP () const"
.br
.ti -1c
.RI "bool \fBIsVaryNorm\fP () const"
.br
.ti -1c
.RI "bool \fBIsAngularDist\fP () const"
.br
.ti -1c
.RI "int \fBIsTotalCapture\fP () const"
.br
.ti -1c
.RI "int \fBNumPoints\fP () const"
.br
.ti -1c
.RI "int \fBGetEntranceKey\fP () const"
.br
.ti -1c
.RI "int \fBGetExitKey\fP () const"
.br
.ti -1c
.RI "int \fBFill\fP (\fBCNuc\fP *, \fBEData\fP *, const \fBConfig\fP &)"
.br
.ti -1c
.RI "int \fBGetL\fP () const"
.br
.ti -1c
.RI "int \fBGetTargetEffectNum\fP () const"
.br
.ti -1c
.RI "int \fBGetSegmentKey\fP () const"
.br
.ti -1c
.RI "int \fBGetMaxAngDistOrder\fP () const"
.br
.ti -1c
.RI "double \fBGetMinEnergy\fP () const"
.br
.ti -1c
.RI "double \fBGetMaxEnergy\fP () const"
.br
.ti -1c
.RI "double \fBGetMinAngle\fP () const"
.br
.ti -1c
.RI "double \fBGetMaxAngle\fP () const"
.br
.ti -1c
.RI "double \fBGetSegmentChiSquared\fP () const"
.br
.ti -1c
.RI "double \fBGetEStep\fP () const"
.br
.ti -1c
.RI "double \fBGetAStep\fP () const"
.br
.ti -1c
.RI "double \fBGetJ\fP () const"
.br
.ti -1c
.RI "double \fBGetNorm\fP () const"
.br
.ti -1c
.RI "double \fBGetNominalNorm\fP () const"
.br
.ti -1c
.RI "double \fBGetNormError\fP () const"
.br
.ti -1c
.RI "std::string \fBGetDataFile\fP () const"
.br
.ti -1c
.RI "void \fBAddPoint\fP (\fBEPoint\fP)"
.br
.ti -1c
.RI "void \fBSetSegmentChiSquared\fP (double)"
.br
.ti -1c
.RI "void \fBSetTargetEffectNum\fP (int)"
.br
.ti -1c
.RI "void \fBSetSegmentKey\fP (int)"
.br
.ti -1c
.RI "void \fBSetNorm\fP (double)"
.br
.ti -1c
.RI "void \fBSetExitKey\fP (int)"
.br
.ti -1c
.RI "void \fBSetIsTotalCapture\fP (int)"
.br
.ti -1c
.RI "void \fBSetVaryNorm\fP (bool)"
.br
.ti -1c
.RI "\fBEPoint\fP * \fBGetPoint\fP (int)"
.br
.ti -1c
.RI "std::vector< \fBEPoint\fP > & \fBGetPoints\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
An AZURE data segment\&. 

An AZURE data segment is specified by an entrance and exit particle pair key, as well as a range of energy and angle value and a data file name\&. The segment also contains flags specifing they type of data point it contains\&. The \fBESegment\fP object is the container object for a vector of \fBEData\fP objects\&. 
.PP
Definition at line \fB17\fP of file \fBESegment\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ESegment::ESegment (\fBSegLine\fP segLine)"
This constructor is used if the segment contains actual experimental data\&. The segment is created with reference to an entry in the segments data file\&. 
.PP
Definition at line \fB13\fP of file \fBESegment\&.cpp\fP\&.
.SS "ESegment::ESegment (\fBExtrapLine\fP extrapLine)"
This constructor is used if the segment contains no actual data, and the points must be created (such as in an extrapolation)\&. The segment is created with reference to an entry in the segments extrapolation file\&. 
.PP
Definition at line \fB52\fP of file \fBESegment\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void ESegment::AddPoint (\fBEPoint\fP point)"
Adds a data point to the segment\&. 
.PP
Definition at line \fB352\fP of file \fBESegment\&.cpp\fP\&.
.SS "int ESegment::Fill (\fBCNuc\fP * theCNuc, \fBEData\fP * theData, const \fBConfig\fP & configure)"
Fills the segment with points from the specified data file according to the maximum and minimum energy and angle ranges\&. The data is assumed to be entirely in the lab frame, and conversions are performed to the center of mass frame\&. 
.PP
Definition at line \fB188\fP of file \fBESegment\&.cpp\fP\&.
.SS "double ESegment::GetAStep () const"
Returns the angle step to take when creating points in a segment\&. Only applies for extrapolation segments\&. 
.PP
Definition at line \fB304\fP of file \fBESegment\&.cpp\fP\&.
.SS "std::string ESegment::GetDataFile () const"
Returns the name of the data file from which to read\&. 
.PP
Definition at line \fB344\fP of file \fBESegment\&.cpp\fP\&.
.SS "int ESegment::GetEntranceKey () const"
Returns the entrance particle pair key of the segment\&. 
.PP
Definition at line \fB170\fP of file \fBESegment\&.cpp\fP\&.
.SS "double ESegment::GetEStep () const"
Returns the energy step to take when creating points in a segment\&. Only applies for extrapolation segments\&. 
.PP
Definition at line \fB296\fP of file \fBESegment\&.cpp\fP\&.
.SS "int ESegment::GetExitKey () const"
Returns the exit particle pair key of the segment\&. 
.PP
Definition at line \fB178\fP of file \fBESegment\&.cpp\fP\&.
.SS "double ESegment::GetJ () const"
Returns the total spin of the segment\&. Only applies if the segment is phase shift\&. 
.PP
Definition at line \fB312\fP of file \fBESegment\&.cpp\fP\&.
.SS "int ESegment::GetL () const"
Returns the orbital angular momentum value for the segment\&. Applies only if the segment is phase shift\&. 
.PP
Definition at line \fB222\fP of file \fBESegment\&.cpp\fP\&.
.SS "int ESegment::GetMaxAngDistOrder () const"
Returns the maximum polynomial order if segment is angular distribution\&. 
.PP
Definition at line \fB248\fP of file \fBESegment\&.cpp\fP\&.
.SS "double ESegment::GetMaxAngle () const"
Returns the maximum angle of the segment (lab frame)\&. 
.PP
Definition at line \fB280\fP of file \fBESegment\&.cpp\fP\&.
.SS "double ESegment::GetMaxEnergy () const"
Returns the maximum energy of the segment (lab frame)\&. 
.PP
Definition at line \fB264\fP of file \fBESegment\&.cpp\fP\&.
.SS "double ESegment::GetMinAngle () const"
Returns the minimum angle of the segment (lab frame)\&. 
.PP
Definition at line \fB272\fP of file \fBESegment\&.cpp\fP\&.
.SS "double ESegment::GetMinEnergy () const"
Returns the minimum energy of the segment (lab frame)\&. 
.PP
Definition at line \fB256\fP of file \fBESegment\&.cpp\fP\&.
.SS "double ESegment::GetNominalNorm () const"
Returns the nominal normalization parameter for the data segment\&. 
.PP
Definition at line \fB328\fP of file \fBESegment\&.cpp\fP\&.
.SS "double ESegment::GetNorm () const"
Returns the normalization parameter for the data segment\&. 
.PP
Definition at line \fB320\fP of file \fBESegment\&.cpp\fP\&.
.SS "double ESegment::GetNormError () const"
Returns the normalization error for the data segment\&. 
.PP
Definition at line \fB336\fP of file \fBESegment\&.cpp\fP\&.
.SS "\fBEPoint\fP * ESegment::GetPoint (int pointNum)"
Returns a pointer to the data point object specified by a position in the \fBEPoint\fP vector\&. 
.PP
Definition at line \fB422\fP of file \fBESegment\&.cpp\fP\&.
.SS "std::vector< \fBEPoint\fP > & ESegment::GetPoints ()"
Returns a reference to the vector of \fBEPoint\fP objects\&. 
.PP
Definition at line \fB431\fP of file \fBESegment\&.cpp\fP\&.
.SS "double ESegment::GetSegmentChiSquared () const"
Returns the chi-squared value of the segment after the fitting process\&. 
.PP
Definition at line \fB288\fP of file \fBESegment\&.cpp\fP\&.
.SS "int ESegment::GetSegmentKey () const"
Returns the segment key for the current \fBESegment\fP object\&. The segment key is the order of the segment specified in the input file, INCLUDING non-active segments\&. 
.PP
Definition at line \fB240\fP of file \fBESegment\&.cpp\fP\&.
.SS "int ESegment::GetTargetEffectNum () const"
Returns the position of the corresponding \fBTargetEffect\fP object in the vector of the parent \fBEData\fP object\&. 
.PP
Definition at line \fB231\fP of file \fBESegment\&.cpp\fP\&.
.SS "bool ESegment::IsAngularDist () const"
Returns true if the segment is angular distribution\&. 
.PP
Definition at line \fB136\fP of file \fBESegment\&.cpp\fP\&.
.SS "bool ESegment::IsDifferential () const"
Returns true if the segment is differential cross section, otherwise returns false\&. 
.PP
Definition at line \fB110\fP of file \fBESegment\&.cpp\fP\&.
.SS "bool ESegment::IsInSegment (\fBEPoint\fP point)"
Returns true if a point is with the specified angle and energy ranges of a segment, otherwise returns false\&. 
.PP
Definition at line \fB94\fP of file \fBESegment\&.cpp\fP\&.
.SS "bool ESegment::IsPhase () const"
Returns true if the segment is phase shift, otherwise returns false\&. 
.PP
Definition at line \fB118\fP of file \fBESegment\&.cpp\fP\&.
.SS "bool ESegment::IsTargetEffect () const"
Returns true if the segment has a corresponding \fBTargetEffect\fP object, otherwise returns false\&. 
.PP
Definition at line \fB145\fP of file \fBESegment\&.cpp\fP\&.
.SS "int ESegment::IsTotalCapture () const"
Returns the number of total capture segments to be summed\&. Should be zero if the segment is not total capture, otherwise the parameter should be the number of segments in the sum (inclusive of the current segment)\&. 
.PP
Definition at line \fB128\fP of file \fBESegment\&.cpp\fP\&.
.SS "bool ESegment::IsVaryNorm () const"
Returns true if the normalization parameter for the segment is to be fit, otherwise returns false\&. 
.PP
Definition at line \fB154\fP of file \fBESegment\&.cpp\fP\&.
.SS "int ESegment::NumPoints () const"
Returns the number of data point objects in the segment\&. 
.PP
Definition at line \fB162\fP of file \fBESegment\&.cpp\fP\&.
.SS "void ESegment::SetExitKey (int key)"
Sets the exit pair key to the given value\&. 
.PP
Definition at line \fB394\fP of file \fBESegment\&.cpp\fP\&.
.SS "void ESegment::SetIsTotalCapture (int num)"
Sets the number of total capture segments to be summed\&. Should be zero if the segment is not total capture, otherwise the parameter should be the number of segments in the sum (inclusive of the current segment)\&. 
.PP
Definition at line \fB406\fP of file \fBESegment\&.cpp\fP\&.
.SS "void ESegment::SetNorm (double norm)"
Sets the normalization parameter for the segment\&. 
.PP
Definition at line \fB386\fP of file \fBESegment\&.cpp\fP\&.
.SS "void ESegment::SetSegmentChiSquared (double chiSquared)"
Sets the chi squared value for the segment during the fitting process\&. 
.br
 
.PP
Definition at line \fB360\fP of file \fBESegment\&.cpp\fP\&.
.SS "void ESegment::SetSegmentKey (int segmentKey)"
Sets the segment key for the current \fBESegment\fP object\&. 
.PP
Definition at line \fB378\fP of file \fBESegment\&.cpp\fP\&.
.SS "void ESegment::SetTargetEffectNum (int targetEffectNum)"
Sets the position of the corresponding \fBTargetEffect\fP object in the vector of the parent \fBEData\fP object\&. 
.PP
Definition at line \fB369\fP of file \fBESegment\&.cpp\fP\&.
.SS "void ESegment::SetVaryNorm (bool varyNorm)"
Set the flag determining if the normalization is varied\&. 
.PP
Definition at line \fB414\fP of file \fBESegment\&.cpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for AZURE2 from the source code\&.
