.TH "/Users/kuba/Desktop/R-Matrix/AZURE2/coul/include/complex_functions.H" 3AZURE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/kuba/Desktop/R-Matrix/AZURE2/coul/include/complex_functions.H
.SH SYNOPSIS
.br
.PP
\fC#include <complex>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <cstdlib>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSIGN\fP(a)   (((a) < 0) ? (\-1) : (1))"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBinf_norm\fP (const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "bool \fBisfinite\fP (const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator+\fP (const \fBstd::complex\fP< double > &z, const int n)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator\-\fP (const \fBstd::complex\fP< double > &z, const int n)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator*\fP (const \fBstd::complex\fP< double > &z, const int n)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator/\fP (const \fBstd::complex\fP< double > &z, const int n)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator+\fP (const int n, const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator\-\fP (const int n, const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator*\fP (const int n, const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator/\fP (const int n, const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator+\fP (const \fBstd::complex\fP< double > &z, const unsigned int n)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator\-\fP (const \fBstd::complex\fP< double > &z, const unsigned int n)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator*\fP (const \fBstd::complex\fP< double > &z, const unsigned int n)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator/\fP (const \fBstd::complex\fP< double > &z, const unsigned int n)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator+\fP (const unsigned int n, const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator\-\fP (const unsigned int n, const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator*\fP (const unsigned int n, const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBoperator/\fP (const unsigned int n, const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBstd::complex\fP< double > &z, const int n)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBstd::complex\fP< double > &z, const int n)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const int n, const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const int n, const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBstd::complex\fP< double > &z, const unsigned int n)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBstd::complex\fP< double > &z, const unsigned int n)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const unsigned int n, const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const unsigned int n, const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBexpm1\fP (const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBlog1p\fP (const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBlog_Gamma\fP (const \fBstd::complex\fP< double > &z)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBsigma_l_calc\fP (const \fBstd::complex\fP< double > &l, const \fBstd::complex\fP< double > &eta)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBlog_Cl_eta_calc\fP (const \fBstd::complex\fP< double > &l, const \fBstd::complex\fP< double > &eta)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBlog_cut_constant_AS_calc\fP (const int omega, const \fBstd::complex\fP< double > &l, const \fBstd::complex\fP< double > &eta)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBlog_cut_constant_CFa_calc\fP (const bool is_it_normalized, const int omega, const \fBstd::complex\fP< double > &l, const \fBstd::complex\fP< double > &eta)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBlog_cut_constant_CFb_calc\fP (const bool is_it_normalized, const int omega, const \fBstd::complex\fP< double > &l, const \fBstd::complex\fP< double > &eta)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBsin_chi_calc\fP (const \fBstd::complex\fP< double > &l, const \fBstd::complex\fP< double > &eta)"
.br
.ti -1c
.RI "\fBstd::complex\fP< double > \fBexp_I_omega_chi_calc\fP (const int omega, const \fBstd::complex\fP< double > &l, const \fBstd::complex\fP< double > &eta)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const double \fBprecision\fP = 1E\-10"
.br
.ti -1c
.RI "const double \fBsqrt_precision\fP = 1E\-5"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define SIGN(a)   (((a) < 0) ? (\-1) : (1))"

.PP
Definition at line \fB7\fP of file \fBcomplex_functions\&.H\fP\&.
.SH "Function Documentation"
.PP 
.SS "\fBstd::complex\fP< double > exp_I_omega_chi_calc (const int omega, const \fBstd::complex\fP< double > & l, const \fBstd::complex\fP< double > & eta)"

.PP
Definition at line \fB360\fP of file \fBcomplex_functions\&.cpp\fP\&.
.SS "\fBstd::complex\fP< double > expm1 (const \fBstd::complex\fP< double > & z)"

.PP
Definition at line \fB10\fP of file \fBcomplex_functions\&.cpp\fP\&.
.SS "double inf_norm (const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB14\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "bool isfinite (const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB24\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > log1p (const \fBstd::complex\fP< double > & z)"

.PP
Definition at line \fB31\fP of file \fBcomplex_functions\&.cpp\fP\&.
.SS "\fBstd::complex\fP< double > log_Cl_eta_calc (const \fBstd::complex\fP< double > & l, const \fBstd::complex\fP< double > & eta)"

.PP
Definition at line \fB160\fP of file \fBcomplex_functions\&.cpp\fP\&.
.SS "\fBstd::complex\fP< double > log_cut_constant_AS_calc (const int omega, const \fBstd::complex\fP< double > & l, const \fBstd::complex\fP< double > & eta)"

.PP
Definition at line \fB200\fP of file \fBcomplex_functions\&.cpp\fP\&.
.SS "\fBstd::complex\fP< double > log_cut_constant_CFa_calc (const bool is_it_normalized, const int omega, const \fBstd::complex\fP< double > & l, const \fBstd::complex\fP< double > & eta)"

.PP
Definition at line \fB254\fP of file \fBcomplex_functions\&.cpp\fP\&.
.SS "\fBstd::complex\fP< double > log_cut_constant_CFb_calc (const bool is_it_normalized, const int omega, const \fBstd::complex\fP< double > & l, const \fBstd::complex\fP< double > & eta)"

.PP
Definition at line \fB307\fP of file \fBcomplex_functions\&.cpp\fP\&.
.SS "\fBstd::complex\fP< double > log_Gamma (const \fBstd::complex\fP< double > & z)"

.PP
Definition at line \fB68\fP of file \fBcomplex_functions\&.cpp\fP\&.
.SS "bool operator!= (const int n, const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB131\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "bool operator!= (const \fBstd::complex\fP< double > & z, const int n)\fC [inline]\fP"

.PP
Definition at line \fB121\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "bool operator!= (const \fBstd::complex\fP< double > & z, const unsigned int n)\fC [inline]\fP"

.PP
Definition at line \fB141\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "bool operator!= (const unsigned int n, const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB151\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator* (const int n, const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB66\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator* (const \fBstd::complex\fP< double > & z, const int n)\fC [inline]\fP"

.PP
Definition at line \fB46\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator* (const \fBstd::complex\fP< double > & z, const unsigned int n)\fC [inline]\fP"

.PP
Definition at line \fB86\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator* (const unsigned int n, const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB106\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator+ (const int n, const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB56\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator+ (const \fBstd::complex\fP< double > & z, const int n)\fC [inline]\fP"

.PP
Definition at line \fB36\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator+ (const \fBstd::complex\fP< double > & z, const unsigned int n)\fC [inline]\fP"

.PP
Definition at line \fB76\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator+ (const unsigned int n, const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB96\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator\- (const int n, const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB61\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator\- (const \fBstd::complex\fP< double > & z, const int n)\fC [inline]\fP"

.PP
Definition at line \fB41\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator\- (const \fBstd::complex\fP< double > & z, const unsigned int n)\fC [inline]\fP"

.PP
Definition at line \fB81\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator\- (const unsigned int n, const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB101\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator/ (const int n, const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB71\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator/ (const \fBstd::complex\fP< double > & z, const int n)\fC [inline]\fP"

.PP
Definition at line \fB51\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator/ (const \fBstd::complex\fP< double > & z, const unsigned int n)\fC [inline]\fP"

.PP
Definition at line \fB91\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > operator/ (const unsigned int n, const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB111\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "bool operator== (const int n, const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB126\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "bool operator== (const \fBstd::complex\fP< double > & z, const int n)\fC [inline]\fP"

.PP
Definition at line \fB116\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "bool operator== (const \fBstd::complex\fP< double > & z, const unsigned int n)\fC [inline]\fP"

.PP
Definition at line \fB136\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "bool operator== (const unsigned int n, const \fBstd::complex\fP< double > & z)\fC [inline]\fP"

.PP
Definition at line \fB146\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "\fBstd::complex\fP< double > sigma_l_calc (const \fBstd::complex\fP< double > & l, const \fBstd::complex\fP< double > & eta)"

.PP
Definition at line \fB126\fP of file \fBcomplex_functions\&.cpp\fP\&.
.SS "\fBstd::complex\fP< double > sin_chi_calc (const \fBstd::complex\fP< double > & l, const \fBstd::complex\fP< double > & eta)"

.PP
Definition at line \fB330\fP of file \fBcomplex_functions\&.cpp\fP\&.
.SH "Variable Documentation"
.PP 
.SS "const double precision = 1E\-10"

.PP
Definition at line \fB8\fP of file \fBcomplex_functions\&.H\fP\&.
.SS "const double sqrt_precision = 1E\-5"

.PP
Definition at line \fB8\fP of file \fBcomplex_functions\&.H\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for AZURE2 from the source code\&.
