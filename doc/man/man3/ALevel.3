.TH "ALevel" 3AZURE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ALevel \- An AZURE level object\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ALevel\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBALevel\fP (\fBNucLine\fP)"
.br
.ti -1c
.RI "\fBALevel\fP (double)"
.br
.ti -1c
.RI "bool \fBIsInRMatrix\fP () const"
.br
.ti -1c
.RI "bool \fBEnergyFixed\fP () const"
.br
.ti -1c
.RI "bool \fBChannelFixed\fP (int) const"
.br
.ti -1c
.RI "bool \fBIsECLevel\fP () const"
.br
.ti -1c
.RI "int \fBNumNFIntegrals\fP () const"
.br
.ti -1c
.RI "int \fBGetTransformIterations\fP () const"
.br
.ti -1c
.RI "int \fBGetECPairNum\fP () const"
.br
.ti -1c
.RI "unsigned char \fBGetECMultMask\fP () const"
.br
.ti -1c
.RI "double \fBGetE\fP () const"
.br
.ti -1c
.RI "double \fBGetGamma\fP (int) const"
.br
.ti -1c
.RI "double \fBGetFitGamma\fP (int) const"
.br
.ti -1c
.RI "double \fBGetFitE\fP () const"
.br
.ti -1c
.RI "double \fBGetNFIntegral\fP (int) const"
.br
.ti -1c
.RI "double \fBGetSqrtNFFactor\fP () const"
.br
.ti -1c
.RI "double \fBGetECConversionFactor\fP (int) const"
.br
.ti -1c
.RI "double \fBGetTransformGamma\fP (int) const"
.br
.ti -1c
.RI "double \fBGetTransformE\fP () const"
.br
.ti -1c
.RI "double \fBGetBigGamma\fP (int) const"
.br
.ti -1c
.RI "double \fBGetShiftFunction\fP (int) const"
.br
.ti -1c
.RI "\fBcomplex\fP \fBGetExternalGamma\fP (int) const"
.br
.ti -1c
.RI "void \fBAddGamma\fP (\fBNucLine\fP)"
.br
.ti -1c
.RI "void \fBAddGamma\fP (double)"
.br
.ti -1c
.RI "void \fBSetGamma\fP (int, double)"
.br
.ti -1c
.RI "void \fBSetE\fP (double)"
.br
.ti -1c
.RI "void \fBSetFitGamma\fP (int, double)"
.br
.ti -1c
.RI "void \fBSetFitE\fP (double)"
.br
.ti -1c
.RI "void \fBAddNFIntegral\fP (double)"
.br
.ti -1c
.RI "void \fBSetSqrtNFFactor\fP (double)"
.br
.ti -1c
.RI "void \fBAddECConversionFactor\fP (double)"
.br
.ti -1c
.RI "void \fBSetTransformGamma\fP (int, double)"
.br
.ti -1c
.RI "void \fBSetTransformE\fP (double)"
.br
.ti -1c
.RI "void \fBSetBigGamma\fP (int, double)"
.br
.ti -1c
.RI "void \fBSetTransformIterations\fP (int)"
.br
.ti -1c
.RI "void \fBSetExternalGamma\fP (int, \fBcomplex\fP)"
.br
.ti -1c
.RI "void \fBSetShiftFunction\fP (int, double)"
.br
.ti -1c
.RI "void \fBSetECParams\fP (int, unsigned char)"
.br
.in -1c
.SH "Detailed Description"
.PP 
An AZURE level object\&. 

An R-matrix level represents a specific eigenstate of the compound nucleus\&. 
.PP
Definition at line \fB14\fP of file \fBALevel\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ALevel::ALevel (\fBNucLine\fP nucLine)"
This constructor is used when a level object is created from an entry in the nuclear file\&. 
.PP
Definition at line \fB8\fP of file \fBALevel\&.cpp\fP\&.
.SS "ALevel::ALevel (double energy)"
This constructor is used when a level object is created using a specific energy\&. 
.PP
Definition at line \fB19\fP of file \fBALevel\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void ALevel::AddECConversionFactor (double conversionFactor)"
This function adds a conversion factor from reduced width amplitude to ANC\&. 
.PP
Definition at line \fB271\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::AddGamma (double reducedWidth)"
This function adds a position in the width vectors corresponding to a new channel\&. 
.br
 The initial reduced width amplitude is set directly\&. 
.PP
Definition at line \fB208\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::AddGamma (\fBNucLine\fP nucLine)"
This function adds a position in the width vectors corresponding to a new channel\&. 
.br
 The initial reduced width amplitude is set from an entry in the nuclear input file\&. 
.PP
Definition at line \fB191\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::AddNFIntegral (double integral)"
This function creates and fills a position for the channel integral in the denominator of the $N_f^{1/2}$ term\&. The integral is of the form $ \int_a^\infty \left[ \frac{W_c(kr)}{W_c{ka_c}} \right]^2 $\&. 
.PP
Definition at line \fB255\fP of file \fBALevel\&.cpp\fP\&.
.SS "bool ALevel::ChannelFixed (int channelNum) const"
Returns true if the reduced width amplitude for corresponding channel number is to be fixed in the fitting process, otherwise returns false\&. 
.PP
Definition at line \fB45\fP of file \fBALevel\&.cpp\fP\&.
.SS "bool ALevel::EnergyFixed () const"
Returns true if the level energy is to be fixed in the fitting process, otherwise returns false\&. 
.PP
Definition at line \fB27\fP of file \fBALevel\&.cpp\fP\&.
.SS "double ALevel::GetBigGamma (int channelNum) const"
Returns the Breit-Wigner partial width for a given channel number\&. 
.PP
Definition at line \fB166\fP of file \fBALevel\&.cpp\fP\&.
.SS "double ALevel::GetE () const"
Returns the energy of the level\&. 
.PP
Definition at line \fB93\fP of file \fBALevel\&.cpp\fP\&.
.SS "double ALevel::GetECConversionFactor (int channelNum) const"
Returns the conversion factor from reduced width amplitude to ANC for a given channel number\&. 
.PP
Definition at line \fB142\fP of file \fBALevel\&.cpp\fP\&.
.SS "unsigned char ALevel::GetECMultMask () const"
Returns the multipolarity mask of external capture gammas to the level\&. 
.PP
Definition at line \fB85\fP of file \fBALevel\&.cpp\fP\&.
.SS "int ALevel::GetECPairNum () const"
Returns the position in the pairs vector corresponding the the external capture level\&. 
.PP
Definition at line \fB77\fP of file \fBALevel\&.cpp\fP\&.
.SS "\fBcomplex\fP ALevel::GetExternalGamma (int channelNum) const"
Returns the external portion of the reduced width amplitude for a given channel number\&. 
.PP
Definition at line \fB182\fP of file \fBALevel\&.cpp\fP\&.
.SS "double ALevel::GetFitE () const"
Returns the fitted energy of the level\&. 
.PP
Definition at line \fB117\fP of file \fBALevel\&.cpp\fP\&.
.SS "double ALevel::GetFitGamma (int channelNum) const"
Returns the fitted internal reduced width amplitude for a given channel number\&. 
.PP
Definition at line \fB109\fP of file \fBALevel\&.cpp\fP\&.
.SS "double ALevel::GetGamma (int channelNum) const"
Returns the internal reduced width amplitude for a given channel number\&. 
.PP
Definition at line \fB101\fP of file \fBALevel\&.cpp\fP\&.
.SS "double ALevel::GetNFIntegral (int channelNum) const"
Returns the calculated channel integral in the denominator of the $N_f^{1/2} $ term for a given channel number\&. 
.PP
Definition at line \fB125\fP of file \fBALevel\&.cpp\fP\&.
.SS "double ALevel::GetShiftFunction (int channelNum) const"
Returns the Shift function for the specified channel number calculated at the resonance energy\&. 
.PP
Definition at line \fB174\fP of file \fBALevel\&.cpp\fP\&.
.SS "double ALevel::GetSqrtNFFactor () const"
Returns the $N_f^{1/2}$ term for the level\&. 
.PP
Definition at line \fB133\fP of file \fBALevel\&.cpp\fP\&.
.SS "double ALevel::GetTransformE () const"
Returns the physical level energy\&. 
.PP
Definition at line \fB158\fP of file \fBALevel\&.cpp\fP\&.
.SS "double ALevel::GetTransformGamma (int channelNum) const"
Returns the physical internal reduced width amplitude for a given channel number\&. 
.PP
Definition at line \fB150\fP of file \fBALevel\&.cpp\fP\&.
.SS "int ALevel::GetTransformIterations () const"
Returns the number of iterations required to transform the level from formal to physical parameters\&. 
.PP
Definition at line \fB69\fP of file \fBALevel\&.cpp\fP\&.
.SS "bool ALevel::IsECLevel () const"
Returns true if the level is a final state for external capture, otherwise returns false\&. 
.PP
Definition at line \fB53\fP of file \fBALevel\&.cpp\fP\&.
.SS "bool ALevel::IsInRMatrix () const"
Returns true if the level is to be included in the A-/R-Matrix calculation, otherwise returns false\&. A level may specify a bound state for external capture, but may not be an R-Matrix state (i\&.e\&. subthreshold state)\&. 
.PP
Definition at line \fB36\fP of file \fBALevel\&.cpp\fP\&.
.SS "int ALevel::NumNFIntegrals () const"
Returns non-zero only if the level is a final state for external capture\&. 
.PP
Definition at line \fB61\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::SetBigGamma (int channelNum, double partialWidth)"
This function sets the Breit-Wigner partial width for a given channel number\&. 
.PP
Definition at line \fB295\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::SetE (double energy)"
This function sets the level energy\&. 
.PP
Definition at line \fB229\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::SetECParams (int pairNum, unsigned char multMask)"
Sets the external capture parameters for the level\&. 
.PP
Definition at line \fB327\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::SetExternalGamma (int channelNum, \fBcomplex\fP reducedWidth)"
This function sets the external reduced width amplitude for a given channel number\&. 
.PP
Definition at line \fB311\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::SetFitE (double energy)"
This function sets the fitted level energy\&. 
.PP
Definition at line \fB245\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::SetFitGamma (int channelNum, double reducedWidth)"
This function sets the fitted internal reduced width amplitude for a given channel number\&. 
.PP
Definition at line \fB237\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::SetGamma (int channelNum, double reducedWidth)"
This function sets the internal reduced width amplitude for a given channel number\&. 
.PP
Definition at line \fB221\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::SetShiftFunction (int channelNum, double shiftFunction)"
Sets the value of the shift function calculated at the resonance energy\&. 
.PP
Definition at line \fB319\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::SetSqrtNFFactor (double term)"
This function sets the $N_f^{1/2}$ term for the level\&. 
.PP
Definition at line \fB263\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::SetTransformE (double energy)"
This function sets the physical level energy\&. 
.PP
Definition at line \fB287\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::SetTransformGamma (int channelNum, double reducedWidth)"
This function sets the physical reduced width amplitude for a given channel number\&. 
.PP
Definition at line \fB279\fP of file \fBALevel\&.cpp\fP\&.
.SS "void ALevel::SetTransformIterations (int iterations)"
This function sets the number of iterations that were required for the transformation from formal to physical parameters\&. 
.PP
Definition at line \fB303\fP of file \fBALevel\&.cpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for AZURE2 from the source code\&.
