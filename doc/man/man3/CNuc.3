.TH "CNuc" 3AZURE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CNuc \- An AZURE compound nucleus\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <CNuc\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBIsPairKey\fP (int)"
.br
.ti -1c
.RI "int \fBNumPairs\fP () const"
.br
.ti -1c
.RI "int \fBNumJGroups\fP () const"
.br
.ti -1c
.RI "int \fBIsPair\fP (\fBPPair\fP)"
.br
.ti -1c
.RI "int \fBIsJGroup\fP (\fBJGroup\fP)"
.br
.ti -1c
.RI "int \fBGetPairNumFromKey\fP (int)"
.br
.ti -1c
.RI "int \fBFill\fP (const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBParseExternalCapture\fP (const \fBConfig\fP &, std::map< int, int > &)"
.br
.ti -1c
.RI "int \fBGetMaxLValue\fP () const"
.br
.ti -1c
.RI "void \fBInitialize\fP (const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBAddPair\fP (\fBPPair\fP)"
.br
.ti -1c
.RI "void \fBAddJGroup\fP (\fBJGroup\fP)"
.br
.ti -1c
.RI "void \fBPrintNuc\fP (const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBTransformIn\fP (const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBSortPathways\fP (const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBPrintPathways\fP (const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBCalcBoundaryConditions\fP (const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBPrintBoundaryConditions\fP (const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBCalcAngularDists\fP (int)"
.br
.ti -1c
.RI "void \fBPrintAngularDists\fP (const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBFillMnParams\fP (ROOT::Minuit2::MnUserParameters &)"
.br
.ti -1c
.RI "void \fBFillCompoundFromParams\fP (const \fBvector_r\fP &)"
.br
.ti -1c
.RI "void \fBTransformOut\fP (const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBPrintTransformParams\fP (const \fBConfig\fP &)"
.br
.ti -1c
.RI "void \fBSetMaxLValue\fP (int)"
.br
.ti -1c
.RI "void \fBCalcShiftFunctions\fP (const \fBConfig\fP &)"
.br
.ti -1c
.RI "\fBcomplex\fP \fBCalcExternalWidth\fP (\fBJGroup\fP *, \fBALevel\fP *, \fBAChannel\fP *, bool, const \fBConfig\fP &)"
.br
.ti -1c
.RI "\fBPPair\fP * \fBGetPair\fP (int)"
.br
.ti -1c
.RI "\fBJGroup\fP * \fBGetJGroup\fP (int)"
.br
.ti -1c
.RI "\fBCNuc\fP * \fBClone\fP () const"
.br
.in -1c
.SH "Detailed Description"
.PP 
An AZURE compound nucleus\&. 

The compound nucleus is the fundamental concept of R-Matrix theory\&. As such, the \fBCNuc\fP object in AZURE is the top level container object for all structure and reaction objects\&. Specifically, the \fBCNuc\fP object is the container object for vectors of \fBPPair\fP and \fBJGroup\fP objects, within which all other nuclear data objects are contained\&. 
.PP
Definition at line \fB25\fP of file \fBCNuc\&.h\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void CNuc::AddJGroup (\fBJGroup\fP jGroup)"
Adds a $ J^\pi $ group to the \fBJGroup\fP vector\&. 
.PP
Definition at line \fB314\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::AddPair (\fBPPair\fP pPair)"
Adds a particle pair to the \fBPPair\fP vector\&. 
.PP
Definition at line \fB306\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::CalcAngularDists (int maxL)"
Creates and sorts the \fBKLGroup\fP and \fBInterference\fP objects and calculates the appropriate coefficients\&. 
.PP
Definition at line \fB995\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::CalcBoundaryConditions (const \fBConfig\fP & configure)"
Calculates the boundary conditions\&. Boundary conditions for each channel are evaluated at the energy of the first level read from the nuclear input file in the $ J^\pi $ group\&. 
.PP
Definition at line \fB916\fP of file \fBCNuc\&.cpp\fP\&.
.SS "\fBcomplex\fP CNuc::CalcExternalWidth (\fBJGroup\fP * theJGroup, \fBALevel\fP * theLevel, \fBAChannel\fP * theChannel, bool isInitial, const \fBConfig\fP & configure)"
Calculates the external reduced width amplitudes for a given channel\&. 
.PP
Definition at line \fB1536\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::CalcShiftFunctions (const \fBConfig\fP & configure)"
This function is called for each iteration to calculate the shift functions at new level energies when the Brune parametrization is used\&. 
.PP
Definition at line \fB1497\fP of file \fBCNuc\&.cpp\fP\&.
.SS "\fBCNuc\fP * CNuc::Clone () const"
Creates a new copy of the \fBCNuc\fP object in memory and returns a pointer to the new object\&. Used in \fBAZURECalc\fP function class for thread safety\&. 
.PP
Definition at line \fB1635\fP of file \fBCNuc\&.cpp\fP\&.
.SS "int CNuc::Fill (const \fBConfig\fP & configure)"
Fills the compound nucleus object, and all nested objects, from data specified in the nuclear and external capture input files\&. Returns -1 if the files could not be read, and 0 if the files were read successfully\&. 
.PP
Definition at line \fB103\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::FillCompoundFromParams (const \fBvector_r\fP & p)"
Fills the \fBCNuc\fP object from the Minuit parameter array\&. 
.PP
Definition at line \fB1176\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::FillMnParams (ROOT::Minuit2::MnUserParameters & p)"
Fills the Minuit parameter array from initial values in the \fBCNuc\fP object\&. 
.PP
Definition at line \fB1147\fP of file \fBCNuc\&.cpp\fP\&.
.SS "\fBJGroup\fP * CNuc::GetJGroup (int jGroupNum)"
Returns a pointer to the $ J^\pi $ group specified by a position in the \fBJGroup\fP vector\&. 
.PP
Definition at line \fB1625\fP of file \fBCNuc\&.cpp\fP\&.
.SS "int CNuc::GetMaxLValue () const"
Returns the maximum value of orbital angular momentum read from channels in the nuclear file\&. 
.PP
Definition at line \fB265\fP of file \fBCNuc\&.cpp\fP\&.
.SS "\fBPPair\fP * CNuc::GetPair (int pairNum)"
Returns a pointer to the particle pair specified by a position in the \fBPPair\fP vector\&. 
.PP
Definition at line \fB1616\fP of file \fBCNuc\&.cpp\fP\&.
.SS "int CNuc::GetPairNumFromKey (int key)"
Returns the position of a particle pair in the \fBPPair\fP vector based on the pair key\&. Pair keys are how particle pairs are specified in the setup files, but may not correspond to the position of the particle pair in the \fBPPair\fP vector\&. If the pair exists, the position in the vector is returned\&. Otherwise, the function returns 0\&. 
.PP
Definition at line \fB87\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::Initialize (const \fBConfig\fP & configure)"
Initializes the compound nucleus object\&. This includes calculating the boundary conditions, transforming from physical to formal parameters, creating and sorting all reaction pathways, and calculating angular interference contributions and coefficients\&. A \fBCNuc\fP object can only be initialized for use AFTER it is filled\&. 
.PP
Definition at line \fB275\fP of file \fBCNuc\&.cpp\fP\&.
.SS "int CNuc::IsJGroup (\fBJGroup\fP jGroup)"
Tests if a $ J^\pi $ group exists in the \fBJGroup\fP vector\&. If the group exists, the position in the vector is returned\&. Otherwise, the function returns 0\&. 
.PP
Definition at line \fB67\fP of file \fBCNuc\&.cpp\fP\&.
.SS "int CNuc::IsPair (\fBPPair\fP pair)"
Tests if a particle pair exists in the \fBPPair\fP vector\&. If pair exists, the position in the vector is returned\&. Otherwise, the function returns 0\&. 
.PP
Definition at line \fB50\fP of file \fBCNuc\&.cpp\fP\&.
.SS "bool CNuc::IsPairKey (int key)"
Returns true if a specified pair key exists in the \fBPPair\fP vector, otherwise returns false\&. 
.PP
Definition at line \fB19\fP of file \fBCNuc\&.cpp\fP\&.
.SS "int CNuc::NumJGroups () const"
Returns the number of $ J^\pi $ groups in the \fBJGroup\fP vector\&. 
.PP
Definition at line \fB41\fP of file \fBCNuc\&.cpp\fP\&.
.SS "int CNuc::NumPairs () const"
Returns the number of particle pairs in the \fBPPair\fP vector\&. 
.PP
Definition at line \fB33\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::ParseExternalCapture (const \fBConfig\fP & configure, std::map< int, int > & ecPairs)"
Fills the ECLevel vector from information in the external capture file\&. Also tests if the final state for external capture exists from the nuclear file\&. If not, the state is created\&. 
.br
 
.PP
Definition at line \fB182\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::PrintAngularDists (const \fBConfig\fP & configure)"
Prints the \fBKLGroup\fP and \fBInterference\fP object structure as well as the calculated coefficients\&. 
.PP
Definition at line \fB1095\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::PrintBoundaryConditions (const \fBConfig\fP & configure)"
Prints the boundary conditions\&. 
.PP
Definition at line \fB955\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::PrintNuc (const \fBConfig\fP & configure)"
Prints the initial structure of the compound nucleus object after filling but before initialization\&. This includes all particle pairs, $ J^\pi $ groups, levels and channels\&. 
.PP
Definition at line \fB323\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::PrintPathways (const \fBConfig\fP & configure)"
Prints the internal and external reaction pathways\&. 
.PP
Definition at line \fB809\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::PrintTransformParams (const \fBConfig\fP & configure)"
Writes the final transformed parameters to 'parameters\&.out' file\&. 
.PP
Definition at line \fB1407\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::SetMaxLValue (int maxL)"
Sets the maximum orbital angular momentum value read from the nuclear input file\&. 
.PP
Definition at line \fB1488\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::SortPathways (const \fBConfig\fP & configure)"
Calculates internal and external reaction pathways\&. 
.PP
Definition at line \fB619\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::TransformIn (const \fBConfig\fP & configure)"
Performs the initial parameter transformations from physical to formal parameters\&. 
.PP
Definition at line \fB403\fP of file \fBCNuc\&.cpp\fP\&.
.SS "void CNuc::TransformOut (const \fBConfig\fP & configure)"
Performs the final parameter transformations from formal to physical parameters\&. 
.PP
Definition at line \fB1200\fP of file \fBCNuc\&.cpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for AZURE2 from the source code\&.
