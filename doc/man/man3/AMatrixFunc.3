.TH "AMatrixFunc" 3AZURE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AMatrixFunc \- A function class to calculate the T-Matrix using the A-Matrix\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <AMatrixFunc\&.h>\fP
.PP
Inherits \fBGenMatrixFunc\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAMatrixFunc\fP (\fBCNuc\fP *, const \fBConfig\fP &\fBconfigure\fP)"
.br
.ti -1c
.RI "\fBCNuc\fP * \fBcompound\fP () const"
.br
.ti -1c
.RI "const \fBConfig\fP & \fBconfigure\fP () const"
.br
.ti -1c
.RI "void \fBClearMatrices\fP ()"
.br
.ti -1c
.RI "void \fBFillMatrices\fP (\fBEPoint\fP *)"
.br
.ti -1c
.RI "void \fBInvertMatrices\fP ()"
.br
.ti -1c
.RI "void \fBCalculateTMatrix\fP (\fBEPoint\fP *)"
.br
.ti -1c
.RI "void \fBCalculateCrossSection\fP ()"
.br
.ti -1c
.RI "\fBcomplex\fP \fBGetAMatrixElement\fP (int, int, int) const"
.br
.ti -1c
.RI "\fBmatrix_c\fP * \fBGetJSpecAInvMatrix\fP (int)"
.br
.ti -1c
.RI "void \fBAddAInvMatrixElement\fP (int, int, int, \fBcomplex\fP)"
.br
.ti -1c
.RI "void \fBAddAMatrix\fP (\fBmatrix_c\fP)"
.br
.in -1c

Public Member Functions inherited from \fBGenMatrixFunc\fP
.in +1c
.ti -1c
.RI "\fBGenMatrixFunc\fP ()"
.br
.ti -1c
.RI "virtual \fB~GenMatrixFunc\fP ()"
.br
.ti -1c
.RI "virtual void \fBClearMatrices\fP ()=0"
.br
.ti -1c
.RI "virtual void \fBFillMatrices\fP (\fBEPoint\fP *)=0"
.br
.ti -1c
.RI "virtual void \fBInvertMatrices\fP ()=0"
.br
.ti -1c
.RI "virtual void \fBCalculateTMatrix\fP (\fBEPoint\fP *)=0"
.br
.ti -1c
.RI "void \fBCalculateCrossSection\fP (\fBEPoint\fP *)"
.br
.ti -1c
.RI "void \fBNewTempTMatrix\fP (\fBTempTMatrix\fP)"
.br
.ti -1c
.RI "void \fBAddToTempTMatrix\fP (int, \fBcomplex\fP)"
.br
.ti -1c
.RI "void \fBClearTempTMatrices\fP ()"
.br
.ti -1c
.RI "void \fBAddTMatrixElement\fP (int, int, \fBcomplex\fP, int decayNum=1)"
.br
.ti -1c
.RI "void \fBAddECTMatrixElement\fP (int, int, \fBcomplex\fP)"
.br
.ti -1c
.RI "int \fBIsTempTMatrix\fP (double, int, int)"
.br
.ti -1c
.RI "int \fBNumTempTMatrices\fP () const"
.br
.ti -1c
.RI "\fBTempTMatrix\fP * \fBGetTempTMatrix\fP (int)"
.br
.ti -1c
.RI "\fBcomplex\fP \fBGetTMatrixElement\fP (int, int, int decayNum=1) const"
.br
.ti -1c
.RI "\fBcomplex\fP \fBGetECTMatrixElement\fP (int, int) const"
.br
.ti -1c
.RI "virtual \fBCNuc\fP * \fBcompound\fP () const =0"
.br
.ti -1c
.RI "virtual const \fBConfig\fP & \fBconfigure\fP () const =0"
.br
.in -1c
.SS "Additional Inherited Members"


Protected Attributes inherited from \fBGenMatrixFunc\fP
.in +1c
.ti -1c
.RI "std::vector< \fBmatrix_c\fP > \fBtmatrix_\fP"
.br
.RI "Vector of internal T-matrix elements accessable to child class\&. "
.ti -1c
.RI "\fBmatrix_c\fP \fBec_tmatrix_\fP"
.br
.RI "Vector of external T-matrix elements accessable to child class\&. "
.in -1c
.SH "Detailed Description"
.PP 
A function class to calculate the T-Matrix using the A-Matrix\&. 

The \fBAMatrixFunc\fP function class calculates the T-Matrix for a given energy point using the compound nucleus object\&. The \fBAMatrixFunc\fP class is a child class of \fBGenMatrixFunc\fP, where the cross section is calculated from the T-Matrix\&. 
.PP
Definition at line \fB14\fP of file \fBAMatrixFunc\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AMatrixFunc::AMatrixFunc (\fBCNuc\fP * compound, const \fBConfig\fP & configure)"
The \fBAMatrixFunc\fP object is created with reference to a \fBCNuc\fP object\&. 
.PP
Definition at line \fB12\fP of file \fBAMatrixFunc\&.cpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "void AMatrixFunc::AddAInvMatrixElement (int jGroupNum, int lambdaNum, int muNum, \fBcomplex\fP aMatrixElement)"
This function adds an inverse A-Matrix element specified by positions in the \fBJGroup\fP and \fBALevel\fP vectors\&. 
.PP
Definition at line \fB225\fP of file \fBAMatrixFunc\&.cpp\fP\&.
.SS "void AMatrixFunc::AddAMatrix (\fBmatrix_c\fP aMatrix)"
This function adds an entire A-Matrix to a vector\&. 
.PP
Definition at line \fB238\fP of file \fBAMatrixFunc\&.cpp\fP\&.
.SS "void AMatrixFunc::CalculateCrossSection ()"
Instantiated in the parent class\&. 
.SS "void AMatrixFunc::CalculateTMatrix (\fBEPoint\fP * point)\fC [virtual]\fP"
This function calculates the T-Matrix for each reaction pathway based on the A-Matrix\&. 
.PP
Implements \fBGenMatrixFunc\fP\&.
.PP
Definition at line \fB119\fP of file \fBAMatrixFunc\&.cpp\fP\&.
.SS "void AMatrixFunc::ClearMatrices ()\fC [virtual]\fP"
Clears all matrices associated with the \fBAMatrixFunc\fP object\&. 
.PP
Implements \fBGenMatrixFunc\fP\&.
.PP
Definition at line \fB36\fP of file \fBAMatrixFunc\&.cpp\fP\&.
.SS "\fBCNuc\fP * AMatrixFunc::compound () const\fC [inline]\fP, \fC [virtual]\fP"
Returns a pointer to the compound nucleus object\&. 
.PP
Implements \fBGenMatrixFunc\fP\&.
.PP
Definition at line \fB20\fP of file \fBAMatrixFunc\&.h\fP\&.
.SS "const \fBConfig\fP & AMatrixFunc::configure () const\fC [inline]\fP, \fC [virtual]\fP"
Returns a reference to the \fBConfig\fP structure\&. 
.PP
Implements \fBGenMatrixFunc\fP\&.
.PP
Definition at line \fB24\fP of file \fBAMatrixFunc\&.h\fP\&.
.SS "void AMatrixFunc::FillMatrices (\fBEPoint\fP * point)\fC [virtual]\fP"
This function creates the inverted A-Matrix from the parameters in the \fBCNuc\fP object\&. 
.PP
Implements \fBGenMatrixFunc\fP\&.
.PP
Definition at line \fB47\fP of file \fBAMatrixFunc\&.cpp\fP\&.
.SS "\fBcomplex\fP AMatrixFunc::GetAMatrixElement (int jGroupNum, int lambdaNum, int muNum) const"
Returns an A-Matrix element specified by positions in the \fBJGroup\fP and \fBALevel\fP vectors\&. 
.PP
Definition at line \fB19\fP of file \fBAMatrixFunc\&.cpp\fP\&.
.SS "\fBmatrix_c\fP * AMatrixFunc::GetJSpecAInvMatrix (int jGroupNum)"
Returns a pointer to an entire A-Matrix specified by a position in the \fBJGroup\fP vector\&. 
.PP
Definition at line \fB27\fP of file \fBAMatrixFunc\&.cpp\fP\&.
.SS "void AMatrixFunc::InvertMatrices ()\fC [virtual]\fP"
This function inverts the inverse A-Matrix to yeild the A-Matrix\&. 
.PP
Implements \fBGenMatrixFunc\fP\&.
.PP
Definition at line \fB105\fP of file \fBAMatrixFunc\&.cpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for AZURE2 from the source code\&.
