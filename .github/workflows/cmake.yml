name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v3
    
#    - name: Install Qt
#      uses: jurplel/install-qt-action@v2
#      with:
#        version: '4.8.7'
    
#    - name: Install root
#   run: |
#        wget --quiet https://root.cern/download/root_v6.20.04.Linux-ubuntu18-x86_64-gcc7.5.tar.gz
#        tar -xzf root_v6.20.04.Linux-ubuntu18-x86_64-gcc7.5.tar.gz
#        source root/bin/thisroot.sh
    - name: Install Everything
      run: |
        wget --quiet https://root.cern/download/root_v6.20.04.Linux-ubuntu18-x86_64-gcc7.5.tar.gz
        tar -xzf root_v6.20.04.Linux-ubuntu18-x86_64-gcc7.5.tar.gz
        source root/bin/thisroot.sh
        sudo add-apt-repository ppa:rock-core/qt4
        sudo apt -f install
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        ctest -C ${{env.BUILD_TYPE}}
        
#        git clone -c feature.manyFiles=true https://github.com/spack/spack.git
#        cd spack
#        git checkout releases/v0.18
#        . share/spack/setup-env.sh
#          spack install minuit
#        cd -   
        
#        git clone -c feature.manyFiles=true https://github.com/spack/spack.git
#        cd spack
#        git checkout releases/v0.18
#        . share/spack/setup-env.sh
#        cd -
                
#    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#      run: |
#        . share/spack/setup-env.sh
#        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

#    - name: Build
      # Build your program with the given configuration
#      run: |
#       . share/spack/setup-env.sh
#       cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

#    - name: Test
#      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: |
#        . share/spack/setup-env.sh
#        ctest -C ${{env.BUILD_TYPE}}
      
